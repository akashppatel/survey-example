# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  #default.driver = org.h2.Driver
  #default.url = "jdbc:h2:mem:play"
  #default.username = sa
  #default.password = ""

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

slick.dbs.default.driver="slick.driver.H2Driver$"
slick.dbs.default.db.driver="org.h2.Driver"
slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

play {
  modules {
    enabled += "play.modules.reactivemongo.ReactiveMongoModule"
  }
}

mongo-async-driver {
  akka {
    loglevel = WARNING
  }
}

mongodb {
  surveydb {
    uri = "mongodb://localhost:27017/survey_example_db"
  }
}

# -----------------  JWT CONFIGURATION STARTS ---------------------------------
# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions. We are using the same key to
# sign Json Web Tokens so you don't need to worry about it.
#
play.http.secret.key="?`wdc6<s]M=Z4VG][lSu1d48pxr;`FvQOl4H^XfvAJX5G<9W`jmSi/?XaFvT9hGb"


# Session timeout
# ~~~~~
# Just like for the cookie session, you can use this key to specify the duration,
# in milliseconds or using the duration syntax (for example 30m or 1h),
# after which the user should be logout, which mean the token will no longer be valid.
# It means you need to refresh the expiration date at each request
play.http.session.maxAge=30s


# Modules
# ~~~~~
# AssetsModule injected in Controller which in turn is injected in view pages to import static resources.
#play.modules {
#  enabled += controllers.AssetsModule
#}


# Signature algorithm
# ~~~~~
# You can specify which algorithm you want to use, among the supported ones, in order to
# create the signature which will assure you that nobody can actually change the token.
# You should probably stick with the default one or use HmacSHA512 for maximum security.
# Default: HmacSHA256
# Supported: HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512
# play.http.session.algorithm=HmacSHA512


# Header name
# ~~~~~
# You can change the name of the header in which the token should be stored.
# Default: Authorization
# play.http.session.jwtName=Jwt


# Response Header name
# ~~~~~
# You can change the name of the response header in which the token should be stored.
# Akka HTTP Server does not allow Authorization as Response Header.
# Default: Authorization
play.http.session.jwtResponseName="JWT-Token"


# Token prefix
# ~~~~~
# Authorization header should have a prefix before the token, like "Basic" for example.
# For a JWT token, it should be "Bearer" (which is the default value) but you can freely
# change or remove it (using an empty string). The token prefix will be directly prepend
# before the token, so be sure to put any necessary whitespaces in it.
# Default: "Bearer "
# play.http.session.tokenPrefix="Bearer "


# The application languages
# ~~~~~
play.i18n.langs=["en"]

play.filters {

  # Disabled CSRFFilter in this example in order to perform authentication
  disabled += play.filters.csrf.CSRFFilter

  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    # allowed = [".herokuapp.com", "localhost:9000"]
  }
}
# -----------------  JWT CONFIGURATION ENDS ---------------------------------